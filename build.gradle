import java.nio.file.Paths

plugins {
    id 'idea'
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'com.github.johnrengelman.shadow' version "$shadowVersion"
}

def name = "Nexus"
group = 'com.starlight'
version = '1.1-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.viaversion.com' }
    maven { url 'https://repo.dmulloy2.net/repository/public/' }
    maven { url 'https://repo.lunarclient.dev' }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation "mkremins:fanciful:0.4.0-SNAPSHOT"

    implementation "org.mongodb:mongo-java-driver:3.10.2"
    implementation "org.reflections:reflections:0.9.11"
    implementation "org.apache.httpcomponents:httpclient:4.5.13"
    implementation "org.apache.httpcomponents:httpasyncclient:4.1.4"
    implementation 'com.squareup.okhttp3:okhttp:3.1.2'
    implementation 'org.json:json:20220924'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.moshi:moshi:1.12.0'

    compileOnly 'com.lunarclient:apollo-api:1.1.0'

    compileOnly "com.viaversion:viaversion-api:$viaVersion"
    compileOnly "com.comphenix.protocol:ProtocolLib:$protocolLibVersion"
    compileOnly "org.spigotmc:spigot-api:$spigotApiVersion"

    compileOnly fileTree(dir: 'spigot', include: '*.jar')
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

shadowJar {
    archiveClassifier.set(null)

    exclude "**/*.kotlin_metadata"
    exclude "**/*.kotlin_module"
    exclude "**/*.kotlin_builtins"
    exclude "META-INF/**"

    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            from components.java

            afterEvaluate {
                artifact(shadowJar) {
                    classifier = 'all'
                }
            }
        }
    }
}

def directory = Paths.get(System.getProperty("user.home"), "StarlightLLC", ".exported").toString()
tasks.withType(Jar).configureEach {
    destinationDirectory = file(directory)
    archiveFileName = "$name-${project.version}.jar"
}